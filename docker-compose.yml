version: "3.8"

x-common-service: &common-service
  build:
    context: .
    dockerfile: dockerfiles/Dockerfile
  env_file:
    - .env
    - ${LOCAL_ENV_FILE:-.env.local}
  volumes:
    - ./src:/app/src
    - ./data:/app/data
    - ./models:/app/models
    - ./metrics:/app/metrics
    - ./reports:/app/reports
    - "/var/run/docker.sock:/var/run/docker.sock"
    - ./mlruns:/app/mlruns
  working_dir: /app
  restart: "no"
  networks:
  - mlops-net

x-git-service: &git-service
  volumes:
    - ./.git:/app/.git
    - ./.dvc:/app/.dvc

services:
  import_raw_data:
    <<: *common-service
    image: maquirog/import_raw_data:latest
    platform: linux/amd64
    command: ["python", "src/data/import_raw_data.py"]

  prepare_weekly_dataset:
    <<: *common-service
    image: maquirog/prepare_weekly_dataset:latest
    platform: linux/amd64
    command: ["python", "src/data/prepare_weekly_dataset.py", "${CURRENT_WEEK}"]

  build_features:
    <<: *common-service
    image: maquirog/build_features:latest
    command: ["python", "src/data/build_features.py"]

  train:
    <<: *common-service
    image: maquirog/train:latest
    command: ["python", "src/models/train.py"]

  predict:
    <<: *common-service
    image: maquirog/predict:latest
    command: ["python", "src/models/predict.py"]

  evaluate:
    <<: *common-service
    image: maquirog/evaluate:latest
    command: ["python", "src/models/evaluate.py"]

  api:
    <<: *common-service
    image: maquirog/api:latest
    ports:
      - "8000:8000"
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    restart: "no"
    depends_on:
      - mlflow-server

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mlflow
      MYSQL_USER: mlflow_user
      MYSQL_PASSWORD: mlflow_password
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    restart: unless-stopped
    networks:
    - mlops-net

  mlflow-server:
    <<: *common-service
    image: maquirog/mlflow-server:latest
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5050
      --backend-store-uri mysql+pymysql://mlflow_user:mlflow_password@mysql:3306/mlflow
      --default-artifact-root /app/mlruns
      --serve-artifacts
    ports:
      - "5050:5050"
    depends_on:
      - mysql
    restart: unless-stopped

  trainer_experiment:
    <<: *common-service
    image: maquirog/trainer_experiment:latest
    command: ["bash", "src/experiment_trainer/entrypoint.sh"]
    depends_on:
      - mlflow-server

  champion_selector:
    <<: [*common-service, *git-service]
    image: maquirog/champion_selector:latest
    command: python src/champion_selector/compare_and_promote.py
    depends_on:
      - mlflow-server
  
  reset-mlflow:
    image: mysql:8.0
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      echo 'ðŸ“¦ Suppression des donnÃ©es MySQL...' &&
      mysql -h mysql -umlflow_user -pmlflow_password mlflow -e \"
        DELETE FROM logged_model_params;
        DELETE FROM logged_model_metrics;
        DELETE FROM logged_model_tags;
        DELETE FROM latest_metrics;
        DELETE FROM metrics;
        DELETE FROM params;
        DELETE FROM tags;
        DELETE FROM runs;
        DELETE FROM model_version_tags;
        DELETE FROM model_versions;
        DELETE FROM registered_models;
        DELETE FROM experiments WHERE experiment_id != 0;
      \" &&
      echo 'ðŸ§¨ Suppression des artefacts...' &&
      rm -rf /app/mlruns/* &&
      echo 'âœ… RÃ©initialisation MLflow terminÃ©e.'
      "
    volumes:
      - ./mlruns:/app/mlruns
    depends_on:
      - mysql
    environment:
      MYSQL_PWD: mlflow_password
    networks:
    - mlops-net



  evidently:
    <<: *common-service
    image: maquirog/evidently:latest
    command: ["bash", "-c", "python evidently/simulate_drift.py && python evidently/run_evidently_report.py"]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    depends_on:
      - api
    networks:
    - mlops-net
    
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
    - mlops-net

volumes:
  mysql-data:
networks:
  mlops-net:
    external: true
