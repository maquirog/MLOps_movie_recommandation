name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  python_build:
    name: Python Application
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest requests-mock
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  cicd_pipeline:
    name: CI/CD Pipeline
    env:
      VOLUME_MODE: "shared"
      LOCAL_ENV_FILE: /dev/null
    runs-on: ubuntu-latest
    needs: python_build
    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Create mlops-net Docker network if not exists
        run: |
          NETWORK_NAME="mlops-net"
          if ! docker network ls --format '{{.Name}}' | grep -q "^${NETWORK_NAME}$"; then
            echo "ðŸ”— CrÃ©ation du rÃ©seau Docker ${NETWORK_NAME}..."
            docker network create ${NETWORK_NAME}
          else
            echo "âœ… RÃ©seau ${NETWORK_NAME} dÃ©jÃ  existant."
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build all service images
        run: |
          docker-compose build

      # Add this step to write the API_KEY to a CI env file
      - name: Write API_KEY to .env.ci for CI
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" > .env.ci

      # Start only infra and API (the API orchestrates the rest)
      - name: Start core services
        run: |
          docker-compose up -d mysql mlflow-server api
          sleep 10
          docker-compose ps
        env:
          LOCAL_ENV_FILE: .env.ci

      - name: Wait for API to be ready
        run: |
          for i in {1..15}; do
            if curl -fs http://localhost:8000/health; then
              echo "API is ready!"
              exit 0
            fi
            echo "Waiting for API to be ready..."
            sleep 4
          done
          echo "API did not become ready in time."
          exit 1

      - name: Install testing dependencies
        run: |
          pip install pytest requests

      - name: Run API tests with pytest
        env:
          API_URL: http://localhost:8000
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          pytest tests/api_tests.py

      - name: Print API logs for debugging
        if: always()
        run: |
          echo "==== mlops-api logs ===="
          docker logs mlops-api || true
          echo "==== mlflow-server logs ===="
          docker logs mlops-mlflow_server || true
          echo "==== mysql logs ===="
          docker logs $(docker ps -aqf "name=mlops-mysql") || true

      - name: Push service images
        run: |
          docker-compose push